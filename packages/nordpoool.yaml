template:
  - sensor:
      - name: "Suggested Cheap Price"
        unique_id: "suggested_cheap_price"
        unit_of_measurement: "EUR/kWh"
        state: >
          {% set current_hour = now().hour %}
          {% set prices_today = state_attr('sensor.nordpool_kwh_lt_eur_3_095_021', 'raw_today') %}
          {% set prices_tomorrow = state_attr('sensor.nordpool_kwh_lt_eur_3_095_021', 'raw_tomorrow') %}
          {% set tomorrow_valid = state_attr('sensor.nordpool_kwh_lt_eur_3_095_021', 'tomorrow_valid') %}

          {# Combine today and tomorrow prices, ignoring past hours #}
          {% set future_prices = prices_today[current_hour:] + (prices_tomorrow if tomorrow_valid else []) %}
          {% set number_prices =  future_prices | count %}

          {% if number_prices <= 24 %}
          {# if future prices are not available just use the lowest of all prices we have #}
          {% set future_prices = prices_today + (prices_tomorrow if tomorrow_valid else []) %}
          {% endif %}

          {% if current_hour <= 6 %}
          {# if early hours of the morning just use the best nightly rates available to get through the day #}
          {% set future_prices = prices_today %}
          {% endif %}


          {# Extract only the 'value' key from each dictionary #}
          {% set future_values = future_prices | map(attribute='value') | list %}

          {# Sort the extracted values #}
          {% set sorted_values = future_values | sort %}

          {# Take the lowest X values and find the maximum #}
          {% set lowest_prices = sorted_values[:6] %}
          {% set suggested_price = lowest_prices | max %}
          {{ suggested_price | round(3) }}
        availability: >
          {{ states('sensor.nordpool_kwh_lt_eur_3_095_021') != 'unavailable' }}

sensor:
  - platform: nordpool
    # Country/region to get the energy prices for.
    region: "LT"

    # Override HA local currency used to fetch the prices from the API.
    currency: "EUR"

    # Add Value Added Taxes (VAT)?
    VAT: True

    # Energy price rounding precision.
    precision: 3

    # Percentage of average price to set the low price attribute
    # low_price = hour_price < average * low_price_cutoff
    low_price_cutoff: 0.95

    # Display price in cents in stead of (for example) Euros.
    price_in_cents: false

    # Price displayed for MWh, kWh or Wh
    price_type: kWh

    # Template to specify additional cost to be added to the tariff.
    # The template price is in EUR, DKK, NOK or SEK (not in cents).
    # For example: "{{ current_price * 0.19 + 0.023 | float}}"
    additional_costs: "{{0.0|float}}"

input_number:
  charge_below_price:
    name: Charge battery below price
    min: 0.001
    max: 0.15
    step: 0.001
    mode: box

  discharge_above_price:
    name: Discharge battery above price
    min: 0.001
    max: 5.0
    step: 0.001
    mode: box

  charge_battery_target_percentage:
    name: Charge Battery Target
    min: 0.0
    max: 100.0
    step: 1.0
    mode: box
    unit_of_measurement: "%"

input_boolean:
  charge_battery_switch:
    name: Triggers Battery Charging

  discharge_battery_switch:
    name: Triggers Battery Discharging

  charge_automation_enable:
    name: Enable Charging

  discharge_automation_enable:
    name: Enable Discharging
