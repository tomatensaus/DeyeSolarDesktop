- id: '1680707528756'
  alias: InverterConfig Update Times
  description: Automation fetches TimeOfUse values and updates HA/Inverter
  trigger:
  - platform: state
    entity_id:
    - number.deyeinverter_timezone1_time
    - number.deyeinverter_timezone2_time
    - number.deyeinverter_timezone3_time
    - number.deyeinverter_timezone4_time
    - number.deyeinverter_timezone5_time
    - number.deyeinverter_timezone6_time
    id: sendUpdatetoHATimeObjects
  - platform: state
    entity_id:
    - input_datetime.timezone1_time
    - input_datetime.timezone2_time
    - input_datetime.timezone3_time
    - input_datetime.timezone4_time
    - input_datetime.timezone5_time
    - input_datetime.timezone6_time
    id: SendUpdateToInverter
  condition:
  - condition: template
    value_template: '{{ trigger.to_state.state != ''unavailable'' }}'
  action:
  - service: telegram_bot.send_message
    metadata: {}
    data:
      message: Update DATE received {{trigger.to_state.state}}
      target: 85050583
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - choose:
    - conditions:
      - condition: trigger
        id:
        - SendUpdateToInverter
      sequence:
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone1_time
        data:
          value: '{{state_attr(''input_datetime.timezone1_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone2_time
        data:
          value: '{{state_attr(''input_datetime.timezone2_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone3_time
        data:
          value: '{{state_attr(''input_datetime.timezone3_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone4_time
        data:
          value: '{{state_attr(''input_datetime.timezone4_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone5_time
        data:
          value: '{{state_attr(''input_datetime.timezone5_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
      - service: number.set_value
        target:
          entity_id: number.deyeinverter_timezone6_time
        data:
          value: '{{state_attr(''input_datetime.timezone6_time'', ''timestamp'') |
            timestamp_custom("%H%M", false) | float}}'
    - conditions:
      - condition: trigger
        id:
        - sendUpdatetoHATimeObjects
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone1_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone1_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone1_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone2_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone2_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone2_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone3_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone3_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone3_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone4_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone4_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone4_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone5_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone5_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone5_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.timezone6_time
        data:
          time: '{% set min = ((states(''number.deyeinverter_timezone6_time'') | int)
            % 100) %} {% set hour = ((states(''number.deyeinverter_timezone6_time'')
            | int) // 100) %} {{''%02d'' % hour}}:{{''%02d'' % min}}:00'
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  mode: single
- id: '1685459034446'
  alias: Telegram debug automation to see chatIDs
  description: ''
  trigger:
  - platform: event
    event_type: telegram_text
    event_data:
      text: command1
    id: sampleCommand1
  - platform: event
    event_type: telegram_text
    id: Unknown
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: Unknown
      sequence:
      - service: telegram_bot.send_message
        data:
          message: 'I got a message from chatID: {{ trigger.event.data.chat_id }}'
          target: '{{ trigger.event.data.chat_id }}'
    - conditions:
      - condition: trigger
        id: sampleCommand1
      sequence:
      - service: telegram_bot.send_message
        data:
          message: command1 was understood and I will action it now
          target: '{{ trigger.event.data.chat_id }}'
      - service: input_boolean.turn_on
        data: {}
  mode: parallel
- id: '1685462793973'
  alias: Telegram Loadshedding annoucement
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.deyeinvertermaster_grid_frequency
    for:
      hours: 0
      minutes: 0
      seconds: 5
    below: 49
    id: power-off
  - platform: numeric_state
    entity_id: sensor.deyeinvertermaster_grid_frequency
    for:
      hours: 0
      minutes: 0
      seconds: 5
    above: 49.1
    id: power-on
  - platform: numeric_state
    entity_id: sensor.deyeinvertermaster_battery_soc
    below: 20
    id: Battery below 20
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: power-on
      - condition: template
        value_template: '{{ trigger.from_state.state != ''unavailable'' }}'
      sequence:
      - service: telegram_bot.send_message
        data:
          message: 'Loadshedding finished with battery SOC: {{states("sensor.deyeinvertermaster_battery_soc")}}%'
      - service: telegram_bot.send_message
        data:
          message: 'Loadshedding finished with battery SOC: {{states("sensor.deyeinvertermaster_battery_soc")}}%'
          target: -12333321
    - conditions:
      - condition: trigger
        id: power-off
      - condition: template
        value_template: '{{ trigger.from_state.state != ''unavailable'' }}'
      sequence:
      - service: telegram_bot.send_message
        data:
          message: 'Loadshedding started with battery SOC: {{states("sensor.deyeinvertermaster_battery_soc")}}%'
      - service: telegram_bot.send_message
        data:
          message: 'Loadshedding started with battery SOC: {{states("sensor.deyeinvertermaster_battery_soc")}}%'
          target: -12333321
    - conditions:
      - condition: trigger
        id: Battery below 20
      - condition: numeric_state
        entity_id: sensor.deyeinvertermaster_grid_frequency
        below: 49
      sequence:
      - service: telegram_bot.send_message
        data:
          message: Grid down and battery below 20%
      - service: telegram_bot.send_message
        data:
          message: Grid down and battery below 20%
          target: -12333321
  mode: single
- id: '1686299812078'
  alias: 'Inverter: Switch to Export essentials/Non-Essentials when sun sets/rises'
  description: This stops the export to non-essentials from the battery when the sun
    is not shining, but during the day solar power is sent to non-essentials
  trigger:
  - platform: sun
    event: sunset
    offset: -00:45:00
    id: poweressentials
  - platform: sun
    event: sunrise
    offset: 00:45:00
    id: powernonessentials
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: poweressentials
      sequence:
      - service: select.select_option
        data:
          option: Essentials
        target:
          entity_id: select.deyeinvertermaster_load_limit_exp_ess_non_ess
    - conditions:
      - condition: trigger
        id: powernonessentials
      sequence:
      - service: select.select_option
        data:
          option: Zero Export
        target:
          entity_id: select.deyeinvertermaster_load_limit_exp_ess_non_ess
  mode: single
- id: '1717083464657'
  alias: Server Sync Clock
  description: ''
  trigger:
  - platform: time
    at: 00:50:00
    id: enableSync
  - platform: time
    at: 01:10:00
    id: disableSync
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - enableSync
      sequence:
      - service: select.select_option
        target:
          entity_id: select.deyeinvertermaster_inverter_basic_settings_sync_clock
        data:
          option: Enable
    - conditions:
      - condition: trigger
        id:
        - disableSync
      sequence:
      - service: select.select_option
        metadata: {}
        data:
          option: Disable
        target:
          entity_id: select.deyeinvertermaster_inverter_basic_settings_sync_clock
  mode: single
